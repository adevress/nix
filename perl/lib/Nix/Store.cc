/*
 * This file was generated automatically by ExtUtils::ParseXS version 3.18 from the
 * contents of Store.xs. Do not edit this file, edit Store.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "perl/lib/Nix/Store.xs"
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Prevent a clash between some Perl and libstdc++ macros. */
#undef do_open
#undef do_close

#include "derivations.hh"
#include "globals.hh"
#include "store-api.hh"
#include "util.hh"
#include "crypto.hh"

#if HAVE_SODIUM
#include <sodium.h>
#endif


using namespace nix;


static ref<Store> store()
{
    static std::shared_ptr<Store> _store;
    if (!_store) {
        try {
            settings.processEnvironment();
            settings.loadConfFile();
            settings.update();
            settings.lockCPU = false;
            _store = openStore();
        } catch (Error & e) {
            croak("%s", e.what());
        }
    }
    return ref<Store>(_store);
}


#line 51 "perl/lib/Nix/Store.cc"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
            Perl_croak(aTHX_ "Usage: %s::%s(%s)", hvname, gvname, params);
        else
            Perl_croak(aTHX_ "Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
        Perl_croak(aTHX_ "Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#ifdef PERL_IMPLICIT_CONTEXT
#define croak_xs_usage(a,b)    S_croak_xs_usage(aTHX_ a,b)
#else
#define croak_xs_usage        S_croak_xs_usage
#endif

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#line 193 "perl/lib/Nix/Store.cc"
#undef dNOOP // Hack to work around "error: declaration of 'Perl___notused' has a different language linkage" error message on clang.
#define dNOOP

XS_EUPXS(XS_Nix__Store_init); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_init)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
#line 51 "perl/lib/Nix/Store.xs"
        store();
#line 206 "perl/lib/Nix/Store.cc"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_Nix__Store_setVerbosity); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_setVerbosity)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "level");
    {
	int	level = (int)SvIV(ST(0))
;
#line 56 "perl/lib/Nix/Store.xs"
        verbosity = (Verbosity) level;
#line 223 "perl/lib/Nix/Store.cc"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_Nix__Store_isValidPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_isValidPath)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "path");
    {
	int	RETVAL;
	dXSTARG;
	char *	path = (char *)SvPV_nolen(ST(0))
;
#line 61 "perl/lib/Nix/Store.xs"
        try {
            RETVAL = store()->isValidPath(path);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 246 "perl/lib/Nix/Store.cc"
	XSprePUSH; PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Nix__Store_queryReferences); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_queryReferences)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	path = (char *)SvPV_nolen(ST(0))
;
#line 72 "perl/lib/Nix/Store.xs"
        try {
            PathSet paths;
            store()->queryReferences(path, paths);
            for (PathSet::iterator i = paths.begin(); i != paths.end(); ++i)
                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 274 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_queryPathHash); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_queryPathHash)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	path = (char *)SvPV_nolen(ST(0))
;
#line 84 "perl/lib/Nix/Store.xs"
        try {
            Hash hash = store()->queryPathHash(path);
            string s = "sha256:" + printHash32(hash);
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 301 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_queryDeriver); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_queryDeriver)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	path = (char *)SvPV_nolen(ST(0))
;
#line 95 "perl/lib/Nix/Store.xs"
        try {
            Path deriver = store()->queryDeriver(path);
            if (deriver == "") XSRETURN_UNDEF;
            XPUSHs(sv_2mortal(newSVpv(deriver.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 328 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_queryPathInfo); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_queryPathInfo)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "path, base32");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	path = (char *)SvPV_nolen(ST(0))
;
	int	base32 = (int)SvIV(ST(1))
;
#line 106 "perl/lib/Nix/Store.xs"
        try {
            ValidPathInfo info = store()->queryPathInfo(path);
            if (info.deriver == "")
                XPUSHs(&PL_sv_undef);
            else
                XPUSHs(sv_2mortal(newSVpv(info.deriver.c_str(), 0)));
            string s = "sha256:" + (base32 ? printHash32(info.narHash) : printHash(info.narHash));
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
            mXPUSHi(info.registrationTime);
            mXPUSHi(info.narSize);
            AV * arr = newAV();
            for (PathSet::iterator i = info.references.begin(); i != info.references.end(); ++i)
                av_push(arr, newSVpv(i->c_str(), 0));
            XPUSHs(sv_2mortal(newRV((SV *) arr)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 367 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_queryPathFromHashPart); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_queryPathFromHashPart)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "hashPart");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	hashPart = (char *)SvPV_nolen(ST(0))
;
#line 127 "perl/lib/Nix/Store.xs"
        try {
            Path path = store()->queryPathFromHashPart(hashPart);
            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 393 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_computeFSClosure); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_computeFSClosure)
{
    dVAR; dXSARGS;
    if (items < 2)
       croak_xs_usage(cv,  "flipDirection, includeOutputs, ...");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	int	flipDirection = (int)SvIV(ST(0))
;
	int	includeOutputs = (int)SvIV(ST(1))
;
#line 137 "perl/lib/Nix/Store.xs"
        try {
            PathSet paths;
            for (int n = 2; n < items; ++n)
                store()->computeFSClosure(SvPV_nolen(ST(n)), paths, flipDirection, includeOutputs);
            for (PathSet::iterator i = paths.begin(); i != paths.end(); ++i)
                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 424 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_topoSortPaths); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_topoSortPaths)
{
    dVAR; dXSARGS;
    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
#line 150 "perl/lib/Nix/Store.xs"
        try {
            PathSet paths;
            for (int n = 0; n < items; ++n) paths.insert(SvPV_nolen(ST(n)));
            Paths sorted = store()->topoSortPaths(paths);
            for (Paths::iterator i = sorted.begin(); i != sorted.end(); ++i)
                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 450 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_followLinksToStorePath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_followLinksToStorePath)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "path");
    {
	SV *	RETVAL;
	char *	path = (char *)SvPV_nolen(ST(0))
;
#line 163 "perl/lib/Nix/Store.xs"
        try {
            store();
            RETVAL = newSVpv(followLinksToStorePath(path).c_str(), 0);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 474 "perl/lib/Nix/Store.cc"
	ST(0) = RETVAL;
	sv_2mortal(ST(0));
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Nix__Store_exportPaths); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_exportPaths)
{
    dVAR; dXSARGS;
    if (items < 2)
       croak_xs_usage(cv,  "fd, sign, ...");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	int	fd = (int)SvIV(ST(0))
;
	int	sign = (int)SvIV(ST(1))
;
#line 175 "perl/lib/Nix/Store.xs"
        try {
            Paths paths;
            for (int n = 2; n < items; ++n) paths.push_back(SvPV_nolen(ST(n)));
            FdSink sink(fd);
            store()->exportPaths(paths, sign, sink);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 504 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_importPaths); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_importPaths)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "fd");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	int	fd = (int)SvIV(ST(0))
;
#line 187 "perl/lib/Nix/Store.xs"
        try {
            FdSource source(fd);
            store()->importPaths(false, source, 0);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 529 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_hashPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_hashPath)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "algo, base32, path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	algo = (char *)SvPV_nolen(ST(0))
;
	int	base32 = (int)SvIV(ST(1))
;
	char *	path = (char *)SvPV_nolen(ST(2))
;
#line 197 "perl/lib/Nix/Store.xs"
        try {
            Hash h = hashPath(parseHashType(algo), path).first;
            string s = base32 ? printHash32(h) : printHash(h);
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 560 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_hashFile); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_hashFile)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "algo, base32, path");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	algo = (char *)SvPV_nolen(ST(0))
;
	int	base32 = (int)SvIV(ST(1))
;
	char *	path = (char *)SvPV_nolen(ST(2))
;
#line 208 "perl/lib/Nix/Store.xs"
        try {
            Hash h = hashFile(parseHashType(algo), path);
            string s = base32 ? printHash32(h) : printHash(h);
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 591 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_hashString); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_hashString)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "algo, base32, s");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	algo = (char *)SvPV_nolen(ST(0))
;
	int	base32 = (int)SvIV(ST(1))
;
	char *	s = (char *)SvPV_nolen(ST(2))
;
#line 219 "perl/lib/Nix/Store.xs"
        try {
            Hash h = hashString(parseHashType(algo), s);
            string s = base32 ? printHash32(h) : printHash(h);
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 622 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_convertHash); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_convertHash)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "algo, s, toBase32");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	algo = (char *)SvPV_nolen(ST(0))
;
	char *	s = (char *)SvPV_nolen(ST(1))
;
	int	toBase32 = (int)SvIV(ST(2))
;
#line 230 "perl/lib/Nix/Store.xs"
        try {
            Hash h = parseHash16or32(parseHashType(algo), s);
            string s = toBase32 ? printHash32(h) : printHash(h);
            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 653 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_signString); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_signString)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "secretKey_, msg");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	secretKey_ = (char *)SvPV_nolen(ST(0))
;
	char *	msg = (char *)SvPV_nolen(ST(1))
;
#line 241 "perl/lib/Nix/Store.xs"
        try {
#if HAVE_SODIUM
            auto sig = SecretKey(secretKey_).signDetached(msg);
            XPUSHs(sv_2mortal(newSVpv(sig.c_str(), sig.size())));
#else
            throw Error("Nix was not compiled with libsodium, required for signed binary cache support");
#endif
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 685 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_checkSignature); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_checkSignature)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "publicKey_, sig_, msg");
    {
	int	RETVAL;
	dXSTARG;
	SV *	publicKey_ = ST(0)
;
	SV *	sig_ = ST(1)
;
	char *	msg = (char *)SvPV_nolen(ST(2))
;
#line 255 "perl/lib/Nix/Store.xs"
        try {
#if HAVE_SODIUM
            STRLEN publicKeyLen;
            unsigned char * publicKey = (unsigned char *) SvPV(publicKey_, publicKeyLen);
            if (publicKeyLen != crypto_sign_PUBLICKEYBYTES)
                throw Error("public key is not valid");

            STRLEN sigLen;
            unsigned char * sig = (unsigned char *) SvPV(sig_, sigLen);
            if (sigLen != crypto_sign_BYTES)
                throw Error("signature is not valid");

            RETVAL = crypto_sign_verify_detached(sig, (unsigned char *) msg, strlen(msg), publicKey) == 0;
#else
            throw Error("Nix was not compiled with libsodium, required for signed binary cache support");
#endif
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 727 "perl/lib/Nix/Store.cc"
	XSprePUSH; PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Nix__Store_addToStore); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_addToStore)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "srcPath, recursive, algo");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	char *	srcPath = (char *)SvPV_nolen(ST(0))
;
	int	recursive = (int)SvIV(ST(1))
;
	char *	algo = (char *)SvPV_nolen(ST(2))
;
#line 280 "perl/lib/Nix/Store.xs"
        try {
            Path path = store()->addToStore(baseNameOf(srcPath), srcPath, recursive, parseHashType(algo));
            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 757 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_makeFixedOutputPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_makeFixedOutputPath)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "recursive, algo, hash, name");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	RETVAL;
	int	recursive = (int)SvIV(ST(0))
;
	char *	algo = (char *)SvPV_nolen(ST(1))
;
	char *	hash = (char *)SvPV_nolen(ST(2))
;
	char *	name = (char *)SvPV_nolen(ST(3))
;
#line 290 "perl/lib/Nix/Store.xs"
        try {
            HashType ht = parseHashType(algo);
            Path path = makeFixedOutputPath(recursive, ht,
                parseHash16or32(ht, hash), name);
            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 791 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}


XS_EUPXS(XS_Nix__Store_derivationFromPath); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_derivationFromPath)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "drvPath");
    {
#line 302 "perl/lib/Nix/Store.xs"
        HV *hash;
#line 807 "perl/lib/Nix/Store.cc"
	SV *	RETVAL;
	char *	drvPath = (char *)SvPV_nolen(ST(0))
;
#line 304 "perl/lib/Nix/Store.xs"
        try {
            Derivation drv = store()->derivationFromPath(drvPath);
            hash = newHV();

            HV * outputs = newHV();
            for (DerivationOutputs::iterator i = drv.outputs.begin(); i != drv.outputs.end(); ++i)
                hv_store(outputs, i->first.c_str(), i->first.size(), newSVpv(i->second.path.c_str(), 0), 0);
            hv_stores(hash, "outputs", newRV((SV *) outputs));

            AV * inputDrvs = newAV();
            for (DerivationInputs::iterator i = drv.inputDrvs.begin(); i != drv.inputDrvs.end(); ++i)
                av_push(inputDrvs, newSVpv(i->first.c_str(), 0)); // !!! ignores i->second
            hv_stores(hash, "inputDrvs", newRV((SV *) inputDrvs));

            AV * inputSrcs = newAV();
            for (PathSet::iterator i = drv.inputSrcs.begin(); i != drv.inputSrcs.end(); ++i)
                av_push(inputSrcs, newSVpv(i->c_str(), 0));
            hv_stores(hash, "inputSrcs", newRV((SV *) inputSrcs));

            hv_stores(hash, "platform", newSVpv(drv.platform.c_str(), 0));
            hv_stores(hash, "builder", newSVpv(drv.builder.c_str(), 0));

            AV * args = newAV();
            for (Strings::iterator i = drv.args.begin(); i != drv.args.end(); ++i)
                av_push(args, newSVpv(i->c_str(), 0));
            hv_stores(hash, "args", newRV((SV *) args));

            HV * env = newHV();
            for (StringPairs::iterator i = drv.env.begin(); i != drv.env.end(); ++i)
                hv_store(env, i->first.c_str(), i->first.size(), newSVpv(i->second.c_str(), 0), 0);
            hv_stores(hash, "env", newRV((SV *) env));

            RETVAL = newRV_noinc((SV *)hash);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 848 "perl/lib/Nix/Store.cc"
	ST(0) = RETVAL;
	sv_2mortal(ST(0));
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Nix__Store_addTempRoot); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Nix__Store_addTempRoot)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "storePath");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	char *	storePath = (char *)SvPV_nolen(ST(0))
;
#line 346 "perl/lib/Nix/Store.xs"
        try {
            store()->addTempRoot(storePath);
        } catch (Error & e) {
            croak("%s", e.what());
        }
#line 873 "perl/lib/Nix/Store.cc"
	PUTBACK;
	return;
    }
}

#ifdef __cplusplus
extern "C"
#endif
XS_EXTERNAL(boot_Nix__Store); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_Nix__Store)
{
    dVAR; dXSARGS;
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#endif
    XS_VERSION_BOOTCHECK;

        (void)newXSproto_portable("Nix::Store::init", XS_Nix__Store_init, file, "");
        (void)newXSproto_portable("Nix::Store::setVerbosity", XS_Nix__Store_setVerbosity, file, "$");
        (void)newXSproto_portable("Nix::Store::isValidPath", XS_Nix__Store_isValidPath, file, "$");
        (void)newXSproto_portable("Nix::Store::queryReferences", XS_Nix__Store_queryReferences, file, "$");
        (void)newXSproto_portable("Nix::Store::queryPathHash", XS_Nix__Store_queryPathHash, file, "$");
        (void)newXSproto_portable("Nix::Store::queryDeriver", XS_Nix__Store_queryDeriver, file, "$");
        (void)newXSproto_portable("Nix::Store::queryPathInfo", XS_Nix__Store_queryPathInfo, file, "$$");
        (void)newXSproto_portable("Nix::Store::queryPathFromHashPart", XS_Nix__Store_queryPathFromHashPart, file, "$");
        (void)newXSproto_portable("Nix::Store::computeFSClosure", XS_Nix__Store_computeFSClosure, file, "$$;@");
        (void)newXSproto_portable("Nix::Store::topoSortPaths", XS_Nix__Store_topoSortPaths, file, ";@");
        (void)newXSproto_portable("Nix::Store::followLinksToStorePath", XS_Nix__Store_followLinksToStorePath, file, "$");
        (void)newXSproto_portable("Nix::Store::exportPaths", XS_Nix__Store_exportPaths, file, "$$;@");
        (void)newXSproto_portable("Nix::Store::importPaths", XS_Nix__Store_importPaths, file, "$");
        (void)newXSproto_portable("Nix::Store::hashPath", XS_Nix__Store_hashPath, file, "$$$");
        (void)newXSproto_portable("Nix::Store::hashFile", XS_Nix__Store_hashFile, file, "$$$");
        (void)newXSproto_portable("Nix::Store::hashString", XS_Nix__Store_hashString, file, "$$$");
        (void)newXSproto_portable("Nix::Store::convertHash", XS_Nix__Store_convertHash, file, "$$$");
        (void)newXSproto_portable("Nix::Store::signString", XS_Nix__Store_signString, file, "$$");
        (void)newXSproto_portable("Nix::Store::checkSignature", XS_Nix__Store_checkSignature, file, "$$$");
        (void)newXSproto_portable("Nix::Store::addToStore", XS_Nix__Store_addToStore, file, "$$$");
        (void)newXSproto_portable("Nix::Store::makeFixedOutputPath", XS_Nix__Store_makeFixedOutputPath, file, "$$$$");
        (void)newXSproto_portable("Nix::Store::derivationFromPath", XS_Nix__Store_derivationFromPath, file, "$");
        (void)newXSproto_portable("Nix::Store::addTempRoot", XS_Nix__Store_addTempRoot, file, "$");
#if (PERL_REVISION == 5 && PERL_VERSION >= 9)
  if (PL_unitcheckav)
       call_list(PL_scopestack_ix, PL_unitcheckav);
#endif
    XSRETURN_YES;
}

